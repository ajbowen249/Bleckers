<div class="@Classes" @onclick="Click">
    @if (Model.Piece != null) {
        <div class="board-piece-container">
            <Piece Model="@Model.Piece" Game="Game" />
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public required GameModel Game { get; set; }

    [Parameter, EditorRequired]
    public required BoardCellModel Model { get; set; }

    private MovementOption? MovementOption {
        get {
            if (Model.Piece != null || Game.MovableLocations == null) {
                return null;
            }

            return Game.MovableLocations.FirstOrDefault(x => x?.Location?.Equals(Model.Location) ?? false, null);
        }
    }

    private bool CanCapture {
        get {
            if (Model.Piece == null || Game.MovableLocations == null) {
                return false;
            }

            return Game.MovableLocations.FirstOrDefault(x =>x?.CaptureCell?.Location?.Equals(Model.Location) ?? false, null) != null;
        }
    }

    public string Classes {
        get {
            var c0 = "0";
            var c1 = "1";
            if (Model.Location.row % 2 == 0) {
                c0 = "1";
                c1 = "0";
            }

            var color = Model.Location.col % 2 == 0 ? c0 : c1;
            var classes = new ClassSet($"board-cell-c{color} board-cell");
            if (Model.Piece != null) {
                if (Model.Piece == Game.SelectedPiece.Value) {
                    classes.Add("board-cell-selected");
                } else if (CanCapture) {
                    classes.Add("board-cell-can-capture");
                }
            } else if (MovementOption != null) {
                classes.Add("board-cell-can-move");
            }

            return classes.ToString();
        }
    }

    public void Click() {
        var opt = MovementOption;
        if (opt != null) {
            Game.MoveSelectedPiece(opt);
        }
    }
}
